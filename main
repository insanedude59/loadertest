local Loader = {}

local ts = game:GetService("TweenService")
local size = UDim2.new(0.32, 0, 0.2, 0)
local size2 = UDim2.fromScale(0.32, 0)

local tween;
local tween2

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ScreenGui"
screenGui.IgnoreGuiInset = true
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Name = "CheetoLoading"
screenGui.Parent = game:GetService("Players").LocalPlayer.PlayerGui

local frame = Instance.new("Frame")
frame.Name = "Frame"
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Position = UDim2.fromScale(0.5, 0.5)
frame.Size = UDim2.new(0.32, 0, 0, 0)
frame.ZIndex = 5000

local options = Instance.new("Frame")
options.Name = "Options"
options.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
options.BackgroundTransparency = 1
options.AnchorPoint = Vector2.new(1, 0.5)
options.Position = UDim2.new(0.854, 0, 0.498, 0)
options.Size = UDim2.fromOffset(295, 163)
options.Parent = screenGui

local uIListLayout = Instance.new("UIListLayout")
uIListLayout.Name = "UIListLayout"
uIListLayout.Padding = UDim.new(0, 5)
uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
uIListLayout.Parent = options

local uIPadding = Instance.new("UIPadding")
uIPadding.Name = "UIPadding"
uIPadding.PaddingLeft = UDim.new(0, 5)
uIPadding.PaddingTop = UDim.new(0, 30)
uIPadding.Parent = options



local uICorner = Instance.new("UICorner")
uICorner.Name = "UICorner"
uICorner.CornerRadius = UDim.new(0, 5)
uICorner.Parent = frame

local textLabel = Instance.new("TextLabel")
textLabel.Name = "TextLabel"
textLabel.FontFace = Font.new(
	"rbxasset://fonts/families/GothamSSm.json",
	Enum.FontWeight.Medium,
	Enum.FontStyle.Normal
)
textLabel.Text = "Cheeto Hub"
textLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
textLabel.TextSize = 16
textLabel.TextTransparency = 1
textLabel.TextXAlignment = Enum.TextXAlignment.Left
textLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
textLabel.BackgroundTransparency = 1
textLabel.Position = UDim2.fromScale(0.0282, 0)
textLabel.Size = UDim2.fromOffset(200, 50)
textLabel.Parent = frame

local textLabel1 = Instance.new("TextLabel")
textLabel1.Name = "TextLabel"
textLabel1.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
textLabel1.Text = "Loader"
textLabel1.TextColor3 = Color3.fromRGB(220, 220, 220)
textLabel1.TextSize = 16
textLabel1.TextTransparency = 1
textLabel1.TextXAlignment = Enum.TextXAlignment.Left
textLabel1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
textLabel1.BackgroundTransparency = 1
textLabel1.Position = UDim2.fromScale(0.0392, 0.185)
textLabel1.Size = UDim2.fromOffset(110, 21)
textLabel1.Parent = frame

local textLabel2 = Instance.new("TextLabel")
textLabel2.Name = "TextLabel"
textLabel2.FontFace = Font.new(
	"rbxasset://fonts/families/GothamSSm.json",
	Enum.FontWeight.Medium,
	Enum.FontStyle.Normal
)
textLabel2.Text = "Loading won't take long, so wait a few seconds..."
textLabel2.TextColor3 = Color3.fromRGB(200, 200, 200)
textLabel2.TextSize = 14
textLabel2.TextTransparency = 1
textLabel2.TextWrapped = true
textLabel2.AnchorPoint = Vector2.new(0.5, 0.5)
textLabel2.AutomaticSize = Enum.AutomaticSize.Y
textLabel2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
textLabel2.BackgroundTransparency = 1
textLabel2.Position = UDim2.fromScale(0.5, 0.537)
textLabel2.Size = UDim2.fromOffset(555, 28)
textLabel2.Parent = frame

local textLabel3 = Instance.new("TextLabel")
textLabel3.Name = "TextLabel"
textLabel3.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
textLabel3.Text = "Last update: 12/12/2022"
textLabel3.TextColor3 = Color3.fromRGB(220, 220, 220)
textLabel3.TextSize = 16
textLabel3.TextTransparency = 1
textLabel3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
textLabel3.BackgroundTransparency = 1
textLabel3.Position = UDim2.new(0.5, 0, 0.864, 0)
textLabel3.Size = UDim2.fromOffset(553, 21)
textLabel3.Parent = frame
textLabel3.AnchorPoint = Vector2.new(0.5, 0.5)

frame.Parent = screenGui

function Loader:Option(OptionText: string, Options)
	task.spawn(function()

		if type(Options) ~= "table" or type(OptionText) ~= "string" then
			return
		end

		local Option1 = Options.Option1
		local Option1Text = Option1.Text
		local Option1Callback = Option1.Callback

		local Option2 = Options.Option2
		local Option2Text = Option2.Text
		local Option2Callback = Option2.Callback


		local ButtonOptions = {}
		local NewSize = UDim2.fromOffset(295, 110)

		local frame = Instance.new("Frame")
		frame.Name = "Frame"
		frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
		frame.Position = UDim2.fromScale(0, -0.06)
		frame.Size = UDim2.fromOffset(295, 0)
		frame.Parent = options
		frame.AnchorPoint = Vector2.new(1, 0.5)
		frame.Name = "NewOption"

		local uICorner = Instance.new("UICorner")
		uICorner.Name = "UICorner"
		uICorner.CornerRadius = UDim.new(0, 5)
		uICorner.Parent = frame

		local optionText = Instance.new("TextLabel")
		optionText.Name = "OptionText"
		optionText.FontFace = Font.new(
			"rbxasset://fonts/families/GothamSSm.json",
			Enum.FontWeight.Medium,
			Enum.FontStyle.Normal
		)
		optionText.Text = OptionText
		optionText.TextColor3 = Color3.fromRGB(200, 200, 200)
		optionText.TextSize = 13
		optionText.TextWrapped = true
		optionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		optionText.BackgroundTransparency = 1
		optionText.BorderSizePixel = 0
		optionText.Size = UDim2.fromOffset(295, 68)
		optionText.Parent = frame

		local textButton = Instance.new("TextButton")

		table.insert(ButtonOptions, {
			Callback = Option1Callback,
			Button = textButton
		})	

		textButton.Name = "TextButton"
		textButton.FontFace = Font.new(
			"rbxasset://fonts/families/GothamSSm.json",
			Enum.FontWeight.Medium,
			Enum.FontStyle.Normal
		)
		textButton.Text = Option1Text
		textButton.TextColor3 = Color3.fromRGB(200, 200, 200)
		textButton.TextSize = 15
		textButton.AutoButtonColor = false
		textButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		textButton.BackgroundTransparency = 1
		textButton.Position = UDim2.fromScale(0.034, 0.62)
		textButton.Size = UDim2.fromOffset(136, 38)

		local uIStroke = Instance.new("UIStroke")
		uIStroke.Name = "UIStroke"
		uIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		uIStroke.Color = Color3.fromRGB(90, 90, 90)
		uIStroke.Parent = textButton

		local uICorner1 = Instance.new("UICorner")
		uICorner1.Name = "UICorner"
		uICorner1.CornerRadius = UDim.new(0, 4)
		uICorner1.Parent = textButton

		textButton.Parent = frame

		local textButton1 = Instance.new("TextButton")
		table.insert(ButtonOptions, {
			Callback = Option2Callback,
			Button = textButton1
		})

		textButton1.Name = "TextButton"
		textButton1.FontFace = Font.new(
			"rbxasset://fonts/families/GothamSSm.json",
			Enum.FontWeight.Medium,
			Enum.FontStyle.Normal
		)
		textButton1.Text = Option2Text
		textButton1.TextColor3 = Color3.fromRGB(200, 200, 200)
		textButton1.TextSize = 15
		textButton1.AutoButtonColor = false
		textButton1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		textButton1.BackgroundTransparency = 1
		textButton1.BorderSizePixel = 0
		textButton1.Position = UDim2.fromScale(0.519, 0.618)
		textButton1.Size = UDim2.fromOffset(136, 38)

		local uIStroke1 = Instance.new("UIStroke")
		uIStroke1.Name = "UIStroke"
		uIStroke1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		uIStroke1.Color = Color3.fromRGB(90, 90, 90)
		uIStroke1.Parent = textButton1

		local uICorner2 = Instance.new("UICorner")
		uICorner2.Name = "UICorner"
		uICorner2.CornerRadius = UDim.new(0, 4)
		uICorner2.Parent = textButton1

		textButton1.Parent = frame

		for i,v in frame:GetDescendants() do
			pcall(function()
				v.TextTransparency = 1
			end)

			pcall(function()
				v.BackgroundTransparency = 1
			end)

			if v:IsA("UIStroke") then
				v.Enabled = false
			end
			continue
		end

		for i,v in ButtonOptions do
			v.Button.MouseButton1Click:Connect(function()
				v.Callback(v.Button.Text)
			end)
			continue
		end
		repeat task.wait() until tween
		wait()
		ts:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = NewSize}):Play()

		for i,v in frame:GetDescendants() do
			if v:IsA("TextLabel") or v:IsA("TextButton") then
				ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {TextTransparency = 0}):Play()
			end
			if v:IsA("UIStroke") then
				v.Enabled = true
			end
			continue
		end
	end)
end


getgenv().Decided = nil


if game.GameId == 3150475059 then
	Loader:Option("Execute Anti-Alt Bypass? It may cause a 60-day ban.", {
		Option1 = {
			Text = "Yes",
			Callback = function()
				Decided = true
				for i,v in frame.Parent:GetDescendants() do
					if v.Name == "NewOption" then
						local option = v;

						ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.fromOffset(295, 0)}):Play()
						ts:Create(v, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()

						for k,v in next, option:GetDescendants() do
							if v.Name == "NewOption" then
								ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.fromOffset(295, 0)}):Play()
								ts:Create(v, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
							end
							if v:IsA("TextLabel") or v:IsA("TextButton") then
								ts:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {TextTransparency = 1}):Play()

							elseif v:IsA("ImageLabel") or v:IsA("ImageButton") then
								ts:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {ImageTransparency = 1}):Play()
							elseif v:IsA("UIStroke") then
								v.Enabled = false
							end
							continue
						end
					end
				end
			end,
		},

		Option2 = {
			Text = "No",
			Callback = function()
				Decided = false
				for i,v in frame.Parent:GetDescendants() do
					if v.Name == "NewOption" then
						local option = v;

						ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.fromOffset(295, 0)}):Play()
						ts:Create(v, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()

						for k,v in next, option:GetDescendants() do
							if v.Name == "NewOption" then
								ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.fromOffset(295, 0)}):Play()
								ts:Create(v, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
							end
							if v:IsA("TextLabel") or v:IsA("TextButton") then
								ts:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {TextTransparency = 1}):Play()

							elseif v:IsA("ImageLabel") or v:IsA("ImageButton") then
								ts:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {ImageTransparency = 1}):Play()
							elseif v:IsA("UIStroke") then
								v.Enabled = false
							end
							continue
						end
					end
				end
			end,
		}
	})
end




for i,v in screenGui:GetDescendants() do
	pcall(function()
		v.TextTransparency = 1
		return
	end)
	continue
end

tween2 = ts:Create(options, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 295, 0, 163)})
tween = ts:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = size})
tween:Play()
tween2:Play()


repeat task.wait() until tween.Completed;
task.wait(0.75)



for i,v in screenGui:GetDescendants() do

	if v.Name == "Options" then
		continue
	end

	if v:IsA("Frame") then
		ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 0}):Play()

	elseif v:IsA("TextLabel") or v:IsA("TextButton") then
		ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {TextTransparency = 0}):Play()

	elseif v:IsA("ImageLabel") or v:IsA("ImageButton") then
		ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {ImageTransparency = 0}):Play()
	end
	continue
end



local isTweening = false;
_G.tween = nil;

coroutine.resume(coroutine.create(function()
	while true do
		task.wait()
		if isTweening or Decided == nil then
			continue;
		end

		if Started then
			isTweening = true;


			_G.tween = ts:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = size2})
			_G.tween:Play()

			for i,v in frame.Parent:GetDescendants() do
				if v.Name == "NewOption" then
					ts:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.fromOffset(295, 0)}):Play()
					ts:Create(v, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
				end
				if v:IsA("TextLabel") or v:IsA("TextButton") then
					ts:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {TextTransparency = 1}):Play()

				elseif v:IsA("ImageLabel") or v:IsA("ImageButton") then
					ts:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {ImageTransparency = 1}):Play()
				elseif v:IsA("UIStroke") then
					v.Enabled = false
				end
				continue
			end

			task.wait(2)
			screenGui:Destroy()
			break
		end
		continue
	end
end))
task.wait(0.25)
